import getPopperClientRect from '../utils/getPopperClientRect';
import getOppositePlacement from '../utils/getOppositePlacement';
import getOffsetParent from '../utils/getOffsetParent';
import getBoundaries from '../utils/getBoundaries';

/**
 * Modifier used to make sure the popper does not overflows from it's boundaries
 * @method
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
export default function preventOverflow(data, options) {
    function shouldNotMoveWithTarget(direction) {
        if (!options.moveWithTarget) {
            return true;
        }
        const placement = data.originalPlacement.split('-')[0];

        if (data.flipped && placement === direction || placement === getOppositePlacement(direction)) {
            return false;
        }
        if (placement !== direction && placement !== getOppositePlacement(direction)) {
            return false;
        }

        return true;
    }

    const boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
    const boundaries = getBoundaries(data.instance.popper, options.padding, boundariesElement);
    options.boundaries = boundaries;

    const order = options.priority;
    const popper = getPopperClientRect(data.offsets.popper);

    const check = {
        left() {
            let left = popper.left;
            if (popper.left < boundaries.left && shouldNotMoveWithTarget('left')) {
                left = Math.max(popper.left, boundaries.left);
            }
            return { left };
        },
        right() {
            let left = popper.left;
            if (popper.right > boundaries.right && shouldNotMoveWithTarget('right')) {
                left = Math.min(popper.left, boundaries.right - popper.width);
            }
            return { left };
        },
        top() {
            let top = popper.top;
            if (popper.top < boundaries.top && shouldNotMoveWithTarget('top')) {
                top = Math.max(popper.top, boundaries.top);
            }
            return { top };
        },
        bottom() {
            let top = popper.top;
            if (popper.bottom > boundaries.bottom && shouldNotMoveWithTarget('bottom')) {
                top = Math.min(popper.top, boundaries.bottom - popper.height);
            }
            return { top };
        }
    };

    order.forEach((direction) => {
        data.offsets.popper = Object.assign(
            popper,
            check[direction]()
        );
    });

    return data;
}
